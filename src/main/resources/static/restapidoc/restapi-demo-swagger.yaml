# This YAML definition can be previewed and validated (to a degree) at: http://editor.swagger.io
# See reference at: http://swagger.io/specification/
swagger: "2.0"
info:
  title: "REST API Boxes and Items Demo"
  description: |
    This is a demo application ("reference implementation" if you will) for REST API above
    the complex domain of "Boxes and Items".

    It is a proof of concept of our REST API rules and
    how they can be documented within a concrete application using [Swagger](http://swagger.io).
  version: "1.0.0"
  termsOfService: "/index.html#terms"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# If hosted on the same host, this can be omitted.
#host: "petstore.swagger.io"
# If basePath is / it can be omitted (which is the case of the demo application).
#basePath: "/v2"
# If not included the one used to access the Swagger definition itself is used.
#schemes:
#- "http"
consumes:
- "application/json"
#- "application/xml"
produces:
#- "application/xml"
- "application/json"
tags:
- name: box
  description: "Management of boxes. Boxes can hold various items."
  externalDocs:
    description: "What is a box? And where is this linked displayed anyway?"
    url: "/index.html#box"
- name: item
  description: "Access to Items stored in the boxes."
- name: label
  description: "Access to Labels and further to items marked by them."
# Reusable response definitions
responses:
  # HTTP 200 OK is not described here, as it should have a body and we need to specify schema
  # that is specific for various resource paths.
  created:
    description: Resource created successfully.
    headers:
      Location:
        description: URI of the created resource
        type: string
  noContent:
    description: Operation finished successfully, no body is returned.
  badRequest:
    description: Bad request - invalid structure or other logical error. Can be fixed by the client.
    schema:
      $ref: "#/definitions/Error"
  notFound:
    description: |
      Resource not found. Wrong resource path was used. In case of paths with ID invalid ID might
      have been provided.
paths:
  /boxes:
    get:
      tags:
      - box
      summary: "List existing boxes"
      responses:
        200:
          $ref: "#/responses/ok"
        400:
          $ref: "#/responses/badRequest"
    post:
      tags:
      - box
      summary: "Add a new available box"
      description: |
        Adds a new box so we can put items in it. Box does not have to be named although it is
        recommended.
      operationId: "addBox"
      parameters:
      - in: "body"
        name: "body"
        description: "New box object"
        required: true
        schema:
          $ref: "#/definitions/Box"
      responses:
        201:
          $ref: "#/responses/created"
        400:
          $ref: "#/responses/badRequest"
#      security:
#      - petstore_auth:
#        - "write:pets"
#        - "read:pets"
  /boxes/{boxId}:
    get:
      tags:
      - box
      summary: |
        Read the box with specified ID.
      responses:
        200:
          description: "Box was found and returned."
          schema: "#/definitions/Box"
        404:
          $ref: "#/responses/notFound"
    put:
      tags:
      - box
      # Summary does not support markup, but description does
      summary: Create or update the box with specified ID.
      description: |
        Create or update the box with specified ID. This may produce following situations:
        * Two
        * How to do markup
      responses:
        200:
          description: "Box was successfully created or updated and its current content returned."
          schema: "#/definitions/Box"
        400:
          $ref: "#/responses/badRequest"
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        400:
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

# TODO this must be thought through as well
#securityDefinitions:
#  petstore_auth:
#    type: "oauth2"
#    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#    flow: "implicit"
#    scopes:
#      write:pets: "modify pets in your account"
#      read:pets: "read your pets"
#  api_key:
#    type: "apiKey"
#    name: "api_key"
#    in: "header"

# For "abstract" definitions we don't want to display, but we want to reuse them.
# Reuse has some problems though - property descriptions must be more generic, so it's
# "Technical name. ..." instead of "Technical name of the box. ..."
x-definitions:
  Common:
    type: object
    required:
    - "name"
    properties:
      id:
        type: integer
        format: "int64"
      # TODO research whether created and/or updated should be represented by headers, if practical
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      key:
        type: "string"
        # as documented in http://swagger.io/specification/ section Data Types it is
        # up to us to use formats beyond JSON-Schema
        format: "identifier-with-hyphens"
        description: |
          Technical name. Can be set explicitly or derived from the name. In any case
          it must be unique - in case of automatic generation from a name the sequence number
          is appended.
      name:
        type: "string"
        description: "Human readable name"
      description:
        type: "string"
        description: "Longer arbitrary description"
# Alternative for per-property references
x-properties:
  id:
    type: integer
    format: "int64"
  created:
    type: "string"
    format: "date-time"
  updated:
    type: "string"
    format: "date-time"
  key:
    type: "string"
    format: "identifier-with-hyphens"
    description: |
      Technical name. Can be set explicitly or derived from the name. In any case
      it must be unique - in case of automatic generation from a name the sequence number
      is appended.
  name:
    type: "string"
    description: "Human readable name"
  description:
    type: "string"
    description: "Longer arbitrary description"
definitions:
  # Box demonstrates how to use common properties from multiple types.
  # Note the title: "Box", without it it would be displayed as "Common".
  # Multiple $refs can be used (multiple definitions merged).
  Box:
    type: "object"
    allOf:
    - $ref: "#/x-definitions/Common"
    - title: "Box"
      properties:
        volume:
          type: "integer"
          format: "int32"
          description: "Approximate volume of the box, not used for validation."
        sealed:
          type: "boolean"
          default: false
          description: |
            When sealed the box does not allow item manipulation (it is read-only).
            The value is optional but always returned when read (defaults to `false`).
      xml:
        name: "Box"
  # Item demonstrates how to reuse properties via references, but we still have to enumerate them.
  Item:
    type: "object"
    allOf:
      - $ref: "#/x-definitions/Common"
      - title: "Item"
        properties:
          box:
            type: "string"
            format: "uri"
            description: "URI of the box containing the item (if any)."
        xml:
          name: "Item"
  # Label shows the same, we try to "override" some description - but that does not work.
  Label:
    type: "object"
    properties:
      id:
        $ref: "#/x-properties/id"
      created:
        $ref: "#/x-properties/created"
      updated:
        $ref: "#/x-properties/updated"
      key:
        $ref: "#/x-properties/key"
      name:
        $ref: "#/x-properties/name"
        description: "Human readable name of the label"
      description:
        $ref: "#/x-properties/description"
    xml:
      name: "Label"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      requestId:
        type: string
        format: uuid
      message:
        type: string
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"